# Generated by Django 5.2.5 on 2025-08-24 17:50

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Student",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("student_id", models.CharField(max_length=20, unique=True)),
                ("first_name", models.CharField(max_length=50)),
                ("last_name", models.CharField(max_length=50)),
                (
                    "date_of_birth",
                    models.DateField(
                        help_text="YYYY-MM-DD", verbose_name="Date of Birth"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female"), ("O", "Other")],
                        max_length=1,
                    ),
                ),
                ("address", models.TextField()),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, unique=True
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=15, null=True)),
                (
                    "current_class",
                    models.CharField(
                        choices=[("11", "Class 11"), ("12", "Class 12")], max_length=2
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["first_name", "last_name"],
            },
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("teacher_id", models.CharField(max_length=20, unique=True)),
                ("first_name", models.CharField(max_length=50)),
                ("last_name", models.CharField(max_length=50)),
                (
                    "date_of_birth",
                    models.DateField(
                        help_text="YYYY-MM-DD", verbose_name="Date of Birth"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female"), ("O", "Other")],
                        max_length=1,
                    ),
                ),
                ("address", models.TextField()),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("phone", models.CharField(max_length=10)),
                ("department", models.CharField(max_length=100)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["first_name", "last_name"],
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("course_code", models.CharField(max_length=20, unique=True)),
                ("course_name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "credits",
                    models.IntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "class_level",
                    models.CharField(
                        choices=[("11", "Class 11"), ("12", "Class 12")], max_length=2
                    ),
                ),
                ("academic_year", models.CharField(default="2024-2025", max_length=9)),
                ("semester", models.CharField(default="First Semester", max_length=20)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="courses",
                        to="TeacherDashboard.teacher",
                    ),
                ),
            ],
            options={
                "ordering": ["class_level", "course_name"],
                "unique_together": {("course_code", "academic_year")},
            },
        ),
        migrations.CreateModel(
            name="StudentCourse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "marks_obtained",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=5, null=True
                    ),
                ),
                (
                    "total_marks",
                    models.DecimalField(decimal_places=2, default=100, max_digits=5),
                ),
                ("grade", models.CharField(blank=True, max_length=2)),
                ("is_completed", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="TeacherDashboard.course",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="TeacherDashboard.student",
                    ),
                ),
            ],
            options={
                "ordering": ["course__course_name"],
                "unique_together": {("student", "course")},
            },
        ),
        migrations.CreateModel(
            name="Leave",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "leave_type",
                    models.CharField(
                        choices=[
                            ("SL", "Sick Leave"),
                            ("CL", "Casual Leave"),
                            ("AL", "Annual Leave"),
                            ("ML", "Medical Leave"),
                            ("EL", "Emergency Leave"),
                            ("OT", "Other"),
                        ],
                        max_length=2,
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("reason", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("P", "Pending"),
                            ("A", "Approved"),
                            ("R", "Rejected"),
                        ],
                        default="P",
                        max_length=1,
                    ),
                ),
                ("approval_date", models.DateTimeField(blank=True, null=True)),
                ("approval_remarks", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "student",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leaves",
                        to="TeacherDashboard.student",
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_leaves",
                        to="TeacherDashboard.teacher",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leaves",
                        to="TeacherDashboard.teacher",
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("student__isnull", False),
                            ("teacher__isnull", False),
                            _connector="OR",
                        ),
                        name="leave_must_have_student_or_teacher",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("student__isnull", False),
                            ("teacher__isnull", False),
                            _negated=True,
                        ),
                        name="leave_cannot_have_both_student_and_teacher",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Attendance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(default=django.utils.timezone.now)),
                (
                    "status",
                    models.CharField(
                        choices=[("P", "Present"), ("A", "Absent"), ("L", "Late")],
                        max_length=1,
                    ),
                ),
                ("remarks", models.TextField(blank=True)),
                ("time_in", models.TimeField(blank=True, null=True)),
                ("time_out", models.TimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "student",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendances",
                        to="TeacherDashboard.student",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendances",
                        to="TeacherDashboard.teacher",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("student__isnull", False),
                            ("teacher__isnull", False),
                            _connector="OR",
                        ),
                        name="attendance_must_have_student_or_teacher",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("student__isnull", False),
                            ("teacher__isnull", False),
                            _negated=True,
                        ),
                        name="attendance_cannot_have_both_student_and_teacher",
                    ),
                ],
            },
        ),
    ]
